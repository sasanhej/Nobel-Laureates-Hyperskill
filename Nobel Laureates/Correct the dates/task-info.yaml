type: edu
files:
- name: main.py
  visible: true
  text: |+
    import pandas as pd
    import os
    import requests
    import sys


    if __name__ == '__main__':
        if not os.path.exists('../Data'):
            os.mkdir('../Data')

        # Download data if it is unavailable.
        if 'Nobel_laureates.json' not in os.listdir('../Data'):
            sys.stderr.write("[INFO] Dataset is loading.\n")
            url = "https://www.dropbox.com/s/m6ld4vaq2sz3ovd/nobel_laureates.json?dl=1"
            r = requests.get(url, allow_redirects=True)
            open('../Data/Nobel_laureates.json', 'wb').write(r.content)
            sys.stderr.write("[INFO] Loaded.\n")

        # write your code here

  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import ast
    from hstest.stage_test import List
    from hstest import *


    answer_year = [1927, 1892, 1906, 1829, 1862, 1870, 1892, 1910, 1899, 1917, 1917, 1932, 1901, 1913, 1923, 1857, 1885, 1873, 1926, 1922, 1918, 1843, 1896, 1896, 1890, 1901, 1948, 1897, 1900, 1881, 1875, 1885, 1913, 1887, 1905, 1910, 1920, 1918, 1923, 1933, 1897, 1946, 1906, 1950, 1921, 1943, 1913, 1922, 1944, 1911, 1938, 1845, 1817, 1852, 1835, 1862, 1843, 1860, 1854, 1846, 1853, 1850, 1830, 1896, 1914, 1934, 1909, 1926, 1931, 1937, 1888, 1913, 1922, 1934, 1937, 1947, 1930, 1958, 1945, 1911, 1914, 1943, 1845, 1941, 1926, 1911, 1926, 1938, 1853, 1910, 1925, 1940, 1866, 1881, 1905, 1898, 1916, 1899, 1898, 1924, 1926, 1931, 1923, 1918, 1936, 1927, 1940, 1947, 1905, 1927, 1926, 1911, 1913, 1927, 1911, 1924, 1932, 1943, 1908, 1936, 1939, 1941, 1925, 1857, 1902, 1872, 1863, 1891, 1875, 1883, 1892, 1881, 1886, 1892, 1897, 1880, 1969, 1967, 1959, 1943, 1942, 1944, 1943, 1955, 1923, 1950, 1955, 1948, 1930, 1947, 1940, 1920, 1944, 1925, 1941, 1915, 1928, 1920, 1927, 1947, 1918, 1918, 1937, 1927, 1943, 1931, 1911, 1920, 1926, 1932, 1913, 1926, 1921, 1920, 1918, 1937, 1936, 1911, 1902, 1910, 1911, 1903, 1906, 1922, 1922, 1911, 1903, 1912, 1908, 1906, 1929, 1914, 1915, 1915, 1892, 1911, 1920, 1852, 1845, 1868, 1856, 1868, 1865, 1892, 1856, 1885, 1862, 1860, 1881, 1866, 1878, 1885, 1893, 1905, 1888, 1881, 1892, 1901, 1893, 1888, 1888, 1874, 1898, 1871, 1890, 1882, 1867, 1891, 1887, 1904, 1896, 1888, 1897, 1895, 1886, 1896, 1903, 1912, 1907, 1888, 1905, 1912, 1899, 1880, 1915, 1916, 1897, 1899, 1901, 1911, 1913, 1901, 1895, 1902, 1908, 1910, 1926, 1922, 1909, 1925, 1903, 1905, 1918, 1905, 1920, 1926, 1908, 1899, 1915, 1911, 1928, 1901, 1902, 1902, 1906, 1915, 1929, 1918, 1918, 1917, 1879, 1901, 1896, 1929, 1931, 1908, 1916, 1929, 1923, 1912, 1910, 1938, 1917, 1926, 1910, 1923, 1925, 1936, 1931, 1915, 1912, 1919, 1921, 1926, 1924, 1899, 1923, 1928, 1933, 1936, 1902, 1916, 1924, 1932, 1933, 1902, 1912, 1903, 1920, 1923, 1915, 1921, 1940, 1941, 1917, 1909, 1922, 1928, 1919, 1936, 1932, 1940, 1919, 1904, 1905, 1932, 1939, 1915, 1922, 1947, 1939, 1920, 1919, 1926, 1930, 1927, 1934, 1923, 1928, 1918, 1920, 1930, 1923, 1944, 1941, 1950, 1931, 1937, 1945, 1931, 1914, 1933, 1943, 1942, 1948, 1948, 1950, 1941, 1944, 1918, 1936, 1941, 1916, 1939, 1950, 1946, 1929, 1925, 1923, 1937, 1944, 1927, 1936, 1939, 1951, 1961, 1943, 1940, 1943, 1941, 1917, 1927, 1931, 1914, 1917, 1924, 1927, 1934, 1928, 1929, 1938, 1942, 1956, 1949, 1947, 1946, 1951, 1949, 1941, 1940, 1926, 1925, 1934, 1921, 1945, 1942, 1930, 1960, 1959, 1945, 1933, 1946, 1947, 1925, 1937, 1948, 1951, 1950, 1917, 1921, 1928, 1947, 1952, 1953, 1952, 1961, 1948, 1930, 1933, 1924, 1940, 1952, 1961, 1932, 1933, 1935, 1931, 1939, 1940, 1943, 1939, 1952, 1946, 1939, 1954, 1953, 1857, 1852, 1842, 1856, 1871, 1890, 1862, 1877, 1877, 1877, 1876, 1863, 1869, 1879, 1861, 1865, 1889, 1867, 1903, 1872, 1897, 1914, 1900, 1874, 1882, 1897, 1907, 1918, 1889, 1915, 1916, 1916, 1914, 1917, 1914, 1917, 1910, 1897, 1918, 1911, 1900, 1917, 1940, 1921, 1912, 1924, 1918, 1899, 1917, 1917, 1943, 1905, 1920, 1919, 1915, 1918, 1944, 1932, 1949, 1943, 1942, 1927, 1933, 1938, 1934, 1930, 1925, 1941, 1919, 1974, 1933, 1929, 1947, 1845, 1888, 1888, 1937, 1924, 1932, 1936, 1828, 1843, 1841, 1866, 1845, 1861, 1879, 1889, 1887, 1877, 1899, 1881, 1897, 1905, 1907, 1906, 1927, 1933, 1920, 1944, 1938, 1859, 1858, 1862, 1869, 1859, 1886, 1884, 1873, 1866, 1864, 1902, 1891, 1905, 1891, 1908, 1905, 1898, 1904, 1900, 1899, 1924, 1918, 1916, 1923, 1832, 1852, 1869, 1892, 1915, 1849, 1845, 1853, 1870, 1895, 1904, 1890, 1916, 1922, 1905, 1918, 1912, 1921, 1917, 1913, 1894, 1940, 1931, 1930, 1916, 1928, 1917, 1958, 1912, 1928, 1953, 1962, 1874, 1949, 1948, 1922, 1867, 1846, 1852, 1867, 1867, 1897, 1926, 1902, 1911, 1937, 1943, 1924, 1923, 1908, 1923, 1917, 1936, 1929, 1926, 1997, 1832, 1859, 1861, 1882, 1903, 1897, 1895, 1929, 1911, 1962, 1963, 1934, 1871, 1916, 1927, 1852, 1853, 1865, 1837, 1838, 1858, 1884, 1888, 1907, 1910, 1920, 1925, 1933, 1946, 1931, 1907, 1906, 1899, 1925, 1901, 1918, 1939, 1935, 1936, 1938, 1959, 1926, 1921, 1940, 1944, 1928, 1930, 1935, 1962, 1954, 1843, 1835, 1874, 1871, 1867, 1901, 1907, 1905, 1901, 1903, 1912, 1941, 1947, 1940, 1865, 1856, 1903, 1906, 1904, 1943, 1939, 1944, 1937, 1947, 1861, 1888, 1922, 1910, 1910, 1933, 1952, 1954, 1902, 1862, 1876, 1865, 1893, 1885, 1899, 1902, 1900, 1920, 1927, 1929, 1937, 1933, 1899, 1959, 1900, 1847, 1864, 1862, 1879, 1872, 1858, 1868, 1874, 1864, 1879, 1887, 1882, 1878, 1877, 1876, 1873, 1875, 1881, 1884, 1874, 1883, 1901, 1869, 1900, 1895, 1903, 1888, 1906, 1877, 1902, 1876, 1875, 1900, 1899, 1881, 1891, 1882, 1929, 1906, 1898, 1912, 1911, 1891, 1906, 1906, 1911, 1913, 1904, 1917, 1886, 1942, 1949, 1927, 1936, 1928, 1957, 1941, 1936, 1936, 1953, 1955, 1962, 1839, 1822, 1828, 1867, 1859, 1852, 1830, 1852, 1845, 1845, 1867, 1871, 1854, 1873, 1866, 1866, 1844, 1870, 1841, 1859, 1866, 1892, 1870, 1906, 1904, 1904, 1924, 1916, 1913, 1939, 1932, 1924, 1933, 1940, 1938, 1947, 1932, 1940, 1944, 1945, 1888, 1895, 1937, 1860, 1918, 1911, 1946, 1942, 1949, 1948, 1860, 1857, 1887, 1940, 1927, 1926, 1922, 1935, 1939, 1940, 1933, 1955, 1955, 1889, 1904, 1871, 1891, 1895, 1897, 1904, 1915, 1926, 1915, 1929, 1939, 1929, 1923, 1932, 1918, 1914, 1941, 1932, 1952, 1924, 1943, 1931, 1905, 1915, 1930, 1940, 1876, 1869, 1865, 1857, 1868, 1887, 1883, 1873, 1900, 1900, 1914, 1886, 1903, 1899, 1923, 1929, 1946, 1930, 1890, 1898, 1899, 1903, 1916, 1912, 1917, 1920, 1937, 1951, 1948, 1967, 1878, 1887, 1906]
    answer_age = [57, 69, 69, 80, 49, 49, 46, 48, 75, 57, 60, 81, 70, 65, 71, 60, 37, 71, 49, 53, 79, 62, 51, 51, 69, 83, 62, 38, 35, 56, 77, 67, 44, 73, 59, 55, 45, 55, 50, 45, 82, 38, 80, 37, 67, 45, 76, 67, 47, 68, 63, 56, 85, 50, 70, 43, 62, 47, 54, 62, 56, 59, 80, 79, 61, 50, 77, 71, 71, 70, 78, 65, 72, 68, 67, 57, 75, 52, 46, 71, 76, 52, 63, 70, 51, 69, 56, 73, 56, 69, 75, 64, 56, 75, 54, 79, 73, 52, 62, 55, 56, 53, 68, 75, 57, 75, 63, 66, 76, 55, 56, 72, 71, 57, 73, 64, 61, 50, 87, 60, 57, 56, 73, 75, 31, 61, 71, 44, 61, 54, 45, 64, 61, 55, 51, 69, 42, 44, 52, 68, 69, 68, 69, 57, 89, 63, 58, 65, 83, 66, 73, 73, 49, 69, 53, 79, 66, 74, 67, 48, 77, 77, 58, 68, 52, 49, 69, 60, 54, 48, 68, 55, 60, 61, 63, 44, 46, 71, 81, 73, 72, 64, 61, 46, 46, 57, 65, 57, 61, 63, 40, 56, 55, 56, 69, 62, 60, 55, 67, 46, 63, 55, 60, 35, 73, 45, 69, 71, 51, 67, 56, 49, 41, 31, 48, 56, 46, 38, 50, 55, 56, 70, 46, 74, 56, 64, 79, 55, 59, 42, 51, 60, 52, 54, 64, 54, 47, 39, 44, 64, 47, 40, 54, 73, 39, 38, 57, 55, 53, 44, 42, 54, 61, 54, 48, 46, 31, 35, 49, 33, 55, 54, 41, 54, 39, 34, 52, 62, 46, 50, 34, 61, 60, 61, 57, 49, 35, 47, 47, 48, 87, 65, 70, 43, 41, 64, 56, 44, 50, 62, 64, 37, 58, 49, 65, 53, 51, 40, 45, 61, 64, 57, 56, 51, 53, 78, 54, 50, 45, 42, 76, 62, 55, 47, 46, 77, 67, 77, 60, 57, 68, 63, 45, 44, 68, 77, 64, 58, 67, 50, 54, 47, 68, 83, 83, 56, 50, 74, 67, 42, 51, 70, 71, 64, 60, 63, 56, 67, 62, 74, 72, 62, 69, 49, 52, 43, 62, 59, 51, 65, 82, 63, 53, 55, 49, 49, 47, 56, 53, 79, 62, 57, 82, 59, 48, 53, 71, 75, 77, 63, 56, 73, 64, 62, 50, 40, 58, 61, 58, 60, 84, 75, 71, 88, 85, 78, 75, 68, 75, 74, 65, 61, 47, 54, 57, 58, 53, 55, 63, 64, 78, 80, 71, 84, 60, 63, 75, 46, 47, 61, 73, 60, 59, 82, 70, 59, 56, 57, 90, 87, 80, 61, 56, 55, 57, 48, 61, 79, 76, 85, 69, 57, 48, 77, 76, 75, 79, 71, 70, 68, 74, 61, 67, 75, 60, 61, 45, 52, 62, 50, 37, 25, 53, 40, 44, 45, 47, 62, 58, 49, 68, 64, 43, 65, 47, 78, 54, 38, 53, 79, 72, 59, 50, 40, 70, 45, 46, 46, 48, 45, 49, 46, 54, 70, 51, 59, 71, 55, 33, 52, 61, 50, 56, 75, 57, 58, 33, 72, 58, 60, 64, 62, 54, 69, 52, 58, 60, 75, 70, 65, 69, 75, 82, 66, 88, 36, 79, 84, 66, 63, 64, 78, 44, 68, 69, 50, 73, 59, 68, 47, 74, 59, 42, 48, 52, 69, 49, 68, 53, 47, 50, 69, 60, 58, 72, 52, 64, 44, 51, 49, 43, 57, 38, 42, 56, 64, 67, 46, 60, 56, 75, 62, 65, 76, 70, 74, 78, 57, 63, 66, 77, 72, 54, 54, 69, 64, 55, 63, 56, 63, 63, 54, 68, 48, 42, 60, 52, 63, 54, 60, 65, 84, 47, 59, 70, 87, 75, 90, 52, 62, 58, 56, 52, 75, 47, 48, 76, 36, 59, 55, 44, 57, 53, 50, 76, 69, 44, 40, 68, 71, 87, 73, 90, 74, 65, 53, 17, 71, 61, 61, 46, 65, 72, 74, 44, 78, 52, 51, 52, 37, 46, 73, 49, 49, 37, 73, 73, 71, 52, 65, 66, 65, 61, 59, 62, 53, 68, 42, 59, 69, 48, 73, 63, 48, 59, 64, 63, 43, 76, 87, 68, 64, 80, 80, 75, 50, 60, 63, 71, 35, 55, 67, 37, 50, 54, 58, 60, 57, 70, 66, 73, 58, 69, 48, 63, 70, 33, 56, 54, 61, 56, 52, 42, 46, 69, 73, 65, 57, 60, 53, 43, 38, 60, 44, 58, 62, 61, 71, 74, 67, 73, 67, 76, 68, 33, 63, 63, 47, 50, 35, 43, 60, 50, 45, 56, 42, 38, 43, 48, 50, 52, 56, 54, 49, 47, 57, 48, 31, 66, 38, 44, 36, 55, 39, 69, 48, 74, 77, 53, 54, 72, 63, 72, 32, 57, 65, 52, 53, 75, 61, 63, 59, 58, 67, 55, 87, 53, 49, 72, 63, 72, 44, 64, 71, 72, 56, 58, 52, 62, 79, 73, 36, 44, 51, 74, 54, 62, 63, 44, 41, 58, 39, 47, 49, 77, 56, 86, 68, 62, 37, 63, 64, 66, 70, 53, 64, 72, 48, 59, 68, 64, 60, 69, 61, 76, 68, 68, 69, 51, 50, 71, 43, 60, 77, 53, 63, 47, 48, 43, 60, 52, 47, 55, 31, 35, 54, 59, 60, 76, 55, 57, 56, 67, 37, 32, 54, 60, 67, 61, 55, 68, 57, 50, 61, 69, 61, 76, 82, 56, 67, 57, 85, 68, 82, 76, 45, 70, 66, 38, 54, 60, 70, 62, 46, 53, 63, 38, 45, 48, 87, 70, 75, 75, 71, 58, 83, 25, 47, 61, 60, 48, 61, 58, 74, 68, 54, 61, 44, 58, 60, 64]


    class DateTest(StageTest):

        def generate(self) -> List[TestCase]:
            return [TestCase(time_limit=15000)]

        def check(self, reply: str, attach):

            reply = reply.strip()

            if len(reply) == 0:
                return CheckResult.wrong("No output was printed")

            if reply.count('[') != 2 or reply.count(']') != 2:
                return CheckResult.wrong('Print both answers as a list')

            num_of_answers = len(reply.split('\n'))
            if num_of_answers != 2:
                return CheckResult.wrong(f"Wrong number of answers. Expected 2, found {num_of_answers}.")

            reply_1 = reply.split('\n')[0]
            index_reply_1_from = reply_1.find('[')
            index_reply_1_to = reply_1.find(']')
            list_year = reply_1[index_reply_1_from: index_reply_1_to + 1]

            reply_2 = reply.split('\n')[1]
            index_reply_2_from = reply_2.find('[')
            index_reply_2_to = reply_2.find(']')
            list_age = reply_2[index_reply_2_from: index_reply_2_to + 1]

            try:
                user_year_list = ast.literal_eval(list_year)
                user_age_list = ast.literal_eval(list_age)
            except Exception as e:
                return CheckResult.wrong(f"Seems that output is in wrong format.\n"
                                         f"Make sure you use only the following Python structures in the output: string, "
                                         f"int, float, list, dictionary")

            if not isinstance(user_year_list, list):
                return CheckResult.wrong(f'Print 1st answer as a list')

            if not isinstance(user_age_list, list):
                return CheckResult.wrong(f'Print 2nd answer as a list')

            if len(user_year_list) != len(answer_year):
                return CheckResult.wrong(
                    f'List on the 1st line should contain {len(answer_year)} values, found {len(user_year_list)}')

            if len(user_age_list) != len(answer_age):
                return CheckResult.wrong(
                    f'List on the 2nd line should contain {len(answer_age)} values, found {len(user_age_list)}')

            for i in range(len(user_year_list)):
                if answer_year[i] != user_year_list[i]:
                    return CheckResult.wrong(f"Seems like the answer is not correct\n"
                                             f"Check element {i} of your 1st answer list")

            for i in range(len(user_age_list)):
                if answer_age[i] != user_age_list[i]:
                    return CheckResult.wrong(f"Seems like the answer is not correct\n"
                                             f"Check element {i} of your 2nd answer list")

            return CheckResult.correct()


    if __name__ == '__main__':
        DateTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/23840#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 20 May 2023 10:26:15 UTC"
record: 3
